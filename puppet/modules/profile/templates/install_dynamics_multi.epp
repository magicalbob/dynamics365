<%- | String $config_file,
      String $sql_server,
      String $admin_pass,
      String $fe_server,
      String $be_server,
      String $adm_server,
      String $download_url,
      String $dynamics_iso,
      String $kb4046795_exe,
      Optional[String] $quiet_install = '/q'
| -%>
Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics started."

# Check if Dynamics already installed
Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics check crm_ready tag for this node"
$dynamicsReady=(c:\scripts\flagmanget.ps1 -Name <%= $hostname %>_ready)
if ($dynamicsReady -eq "true") {
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics dynamics already installed"
}
else
{
  # Copy dynamics iso to local disk

  start-job -scriptblock {
    Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics copy dynamics 365 upgrade to local disk"
    $url = "<%= $download_url %><%= $kb4046795_exe %>"
    $output = "c:\scripts\<%= $kb4046795_exe %>"
    Start-BitsTransfer -Source $url -Destination $output
  }

  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics copy dynamics iso to local disk"
  Import-Module BitsTransfer
  $url = "<%= $download_url %><%= $dynamics_iso %>"
  $output = "c:\scripts\<%= $dynamics_iso %>"
  Start-BitsTransfer -Source $url -Destination $output

  # Wait until SQL Server is available
  Do {
    Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics wait until sql ready"
    $sqlReady=(c:\scripts\flagmanget.ps1 -Name sql_ready)
    if ($sqlReady -ne "true") {
      Start-Sleep 60
    }
  } Until ($sqlReady -eq "true")
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics SQL server is available"

  # Mount dynamics iso
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics copy mount dynamic iso"
  Mount-DiskImage -ImagePath c:\scripts\<%= $dynamics_iso %>

  # Work out dynamics drive letter and change to it
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics copy getting iso dir"
  $install_drive=""
  while ( ! $install_drive ) {
    $install_drive=(Get-DiskImage -ImagePath c:\scripts\<%= $dynamics_iso %>|Get-Volume).DriveLetter
  }
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics copy got iso dir $install_drive"

  # If back end, wait until ssrs has finished installing
  if ( $env:computername -like "<%= $be_server %>" ) {
    Do {
      Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics wait until ssrs node installed"
      $ssrsReady=(c:\scripts\flagmanget.ps1 -Name ssrs_ready)
      if ($ssrsReady -ne "true") {
        Start-Sleep 60
      }
    } Until ($ssrsReady -eq "true")
    Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics ssrs node has installed"
  }

  # If admin, wait until ssrs has finished installing
  if ( $env:computername -like "<%= $adm_server %>" ) {
    Do {
      Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics wait until back end node installed"
      # work out if back end has installed yet
      $ssrsReady=(c:\scripts\flagmanget.ps1 -Name ssrs_ready)
      if ($ssrsReady -ne "true") {
        Start-Sleep 60
      }
    } Until ($ssrsReady -eq "true")
    Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics ssrs node has installed"
  }

  # Install dynamics
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics start dynamics install"
  $install_command=('c:\windows\system32\cmd.exe /r start /b /wait '+$install_drive+':\server\amd64\SetupServer.exe <%= $quiet_install %> /config <%= $config_file %> /L c:\Windows\Temp\dynamics_setup.log')
  Invoke-Expression $install_command
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics completed dynamics install"

  # set flag to say dynamics installed on this machine now
  c:\scripts\flagmanset.ps1 -Name "$(hostname)_ready" -Value "true"

  # wait for all dynamics nodes to install (so wait for be_server and adm_server)
  Do {
    Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics wait until all dynamics nodes installed"
    $admReady=(c:\scripts\flagmanget.ps1 -Name "<%= $adm_server %>_ready")
    $beReady=(c:\scripts\flagmanget.ps1 -Name "<%= $be_server %>_ready")
    if (($beReady -ne "true") -Or ($admReady -ne "true")) {
      Start-Sleep 60
    }
  } Until (($beReady -eq "true") -And ($admReady -eq "true"))
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics all dynamics nodes have installed"

  # check that dynamics really is installed. change the ready flag to error if not.
  if (!(Test-Path 'C:\Program Files\Microsoft Dynamics CRM\tools\Microsoft.Crm.DeploymentManager.exe')) {
    c:\scripts\flagmanset.ps1 -Name "$(hostname)_ready" -Value "error"
  }

  # Upgrade from 2016 to 365
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics start dynamics 365 upgrade"
  c:\scripts\flagmanset.ps1 -Name "$(hostname)_365_started" -Value "true"
  c:\windows\system32\cmd.exe /r start /b /wait c:\scripts\<%= $kb4046795_exe %> CRM.PATCH.ARGS="<%= $quiet_install %> /norestart"
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics completed dynamics 365 upgrade"
  c:\scripts\flagmanset.ps1 -Name "$(hostname)_365_done" -Value "true"

  # Restart computer post-install
  Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "install_dynamics restart computer"
  Restart-Computer -Force

  # Wait for restart to happen
  Start-Sleep -Seconds 6000
}
