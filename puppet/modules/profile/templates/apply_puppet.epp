<%- | String $ad_domain_url,
      String $redis_ip,
      String $redis_pass,
      String $ad_domain,
      String $ad_suffix,
      String $admin_user,
      String $admin_pass
| -%>
Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "apply_puppet started."

if (Test-Path c:\programdata\amazon\ec2-windows\launch\sysprep\unattend.xml) {
    C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeInstance.ps1
} 

[Environment]::SetEnvironmentVariable("FACTERLIB","c:\programdata\puppetlabs\code\environments\production\facter","Machine")

if (!(Test-Path c:\users\<%= $admin_user %>.<%= $ad_domain %><%= $ad_suffix %>\.puppetlabs\etc\code\environments)) {
  if (([System.Security.Principal.WindowsIdentity]::GetCurrent()).Name -eq "<%= $ad_domain %><%= $ad_suffix %>\<%= $admin_user %>") {
    mkdir c:\users\<%= $admin_user %>.<%= $ad_domain %><%= $ad_suffix %>\.puppetlabs\etc\code\environments\production
    cd c:\users\<%= $admin_user %>.<%= $ad_domain %><%= $ad_suffix %>\.puppetlabs\etc\code\environments\production
    xcopy /E /Y c:\programdata\puppetlabs\code\environments\production\* .
    echo "---" > .\hiera.yaml
    echo "version: 5" >> .\hiera.yaml
    echo "defaults:" >> .\hiera.yaml
    echo "  datadir: c:\programdata\puppetlabs\code\environments\production\hieradata" >> .\hiera.yaml
    echo "  data_hash: yaml_data" >> .\hiera.yaml
    echo "hierarchy:" >> .\hiera.yaml
    echo "  - name: Common" >> .\hiera.yaml
    echo "    paths:" >> .\hiera.yaml
    echo "      - account/account.yaml" >> .\hiera.yaml
    echo "      - common.yaml" >> .\hiera.yaml

    $admincred=New-Object pscredential -ArgumentList ([pscustomobject]@{ UserName="$computername\administrator"; Password=(ConvertTo-SecureString -String '<%= $admin_pass %>' -AsPlainText -Force)[0] })

    Invoke-Command -ScriptBlock { Restart-Computer -Force } -Credential $admincred -ComputerName (hostname)
  }
}

$machine_name = hostname
if (($machine_name -Like "WIN*") -Or ($machine_name -Like "EC2*")) {
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord 
  Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
  Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force

  $getMachineNameTries=0

  while (($machine_name -Like "WIN*") -Or ($machine_name -Like "EC2*")) {
    if (Test-Path c:\programdata\amazon\ec2-windows\launch\sysprep\unattend.xml) {
      # get instance-id for AWS EC2 instance
      $mac = (curl http://169.254.169.254/latest/meta-data/instance-id -UseBasicParsing).Content
    } else {
      # get MAC of ethernet
      $mac = (Get-NetAdapter "Ethernet 2").MacAddress -replace '-',''
    }
    # look up the mac address in redis to find name of machine
    $got_name = (c:\scripts\flagmanget.ps1 -Name $mac)
    # if found, put puppet code back in place, rename the computer to the got name and restart
    if ( $got_name.length -like 3 ) {
      echo "Not found"
      $getMachineNameTries++
      if ( $getMachineNameTries -gt 3 ) {
        remove-item -path c:\scripts\prefix -force
        restart-computer -force
      }
    } else {
      rename-computer $got_name -force
      restart-computer -force
    }
    # otherwise get the machine_name again to make sure it has not changed
    $machine_name = hostname
  }
}

# if vagrant shared folder exists visit it
cmd /c if exist \\vboxsrv\vagrant start /b /min \\vboxsrv\vagrant
while (!(Test-Path "c:\programdata\puppetlabs\code\environments\production\manifests\site.pp")) { Start-Sleep 10 }
# wait for vagrant to set the machine name if this is vagrant
while ($machine_name -Like "VAGRANT*") {
  $machine_name = hostname
}

# set the FQDN in the registry
Set-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\" -Name Domain -Value "<%= $ad_domain_url %>"

# if this is the active directory machine set its IP in redis for the other machines
if ($machine_name -Like "ALLINONE") {
  $ad_ip=(Get-NetIPAddress -InterfaceAlias "Ethernet*").IPAddress
  c:\scripts\flagmanset.ps1 -Name ad_ip -Value $ad_ip
}
if ($machine_name -Like "DYNADIR") {
  $ad_ip=(Get-NetIPAddress -InterfaceAlias "Ethernet*").IPAddress
  c:\scripts\flagmanset.ps1 -Name ad_ip -Value $ad_ip
}

# Set flag that machine build has started, to true, for locking
c:\scripts\flagmanset.ps1 -Name ${machine_name}_started -Value true

Write-EventLog -LogName "Application" -Source "Puppet" -EventID 1 -EntryType Information -Message "apply_puppet applying puppet"
puppet apply --verbose --logdest eventlog c:\programdata\puppetlabs\code\environments\production\manifests\site.pp
